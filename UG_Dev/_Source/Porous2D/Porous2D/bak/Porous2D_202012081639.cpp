//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  G:\RPWorkspace\PorousGen\UG_Dev\Application\Porous2D.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: RenPeng
//              Version: NX 1919
//              Date: 12-08-2020  (Format: mm-dd-yyyy)
//              Time: 09:59 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "Porous2D.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(Porous2D::theSession) = NULL;
UI *(Porous2D::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
Porous2D::Porous2D()
{
    try
    {
        // Initialize the NX Open C++ API environment
        Porous2D::theSession = NXOpen::Session::GetSession();
        Porous2D::theUI = UI::GetUI();
        theDlxFileName = "Porous2D.dlx";
        theDialog = Porous2D::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &Porous2D::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &Porous2D::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &Porous2D::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &Porous2D::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &Porous2D::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
Porous2D::~Porous2D()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    Porous2D *thePorous2D = NULL;
    try
    {
        thePorous2D = new Porous2D();
        // The following method shows the dialog immediately
        thePorous2D->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(thePorous2D != NULL)
    {
        delete thePorous2D;
        thePorous2D = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int Porous2D::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void Porous2D::initialize_cb()
{
    try
    {
        groupShape = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("groupShape"));
        enumParticleShape = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enumParticleShape"));
        groupSize = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("groupSize"));
        expressionFaceLength = dynamic_cast<NXOpen::BlockStyler::ExpressionBlock*>(theDialog->TopBlock()->FindBlock("expressionFaceLength"));
        expressionFaceWidth = dynamic_cast<NXOpen::BlockStyler::ExpressionBlock*>(theDialog->TopBlock()->FindBlock("expressionFaceWidth"));
        expressionParticleSize = dynamic_cast<NXOpen::BlockStyler::ExpressionBlock*>(theDialog->TopBlock()->FindBlock("expressionParticleSize"));
        groupParticle = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("groupParticle"));
        integerParticleNumber = dynamic_cast<NXOpen::BlockStyler::IntegerBlock*>(theDialog->TopBlock()->FindBlock("integerParticleNumber"));
        doublePorousRatio = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("doublePorousRatio"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set
//here will take precedence and dialog will be launched showing that value.
//------------------------------------------------------------------------------
void Porous2D::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int Porous2D::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int Porous2D::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    NXOpen::Part* workPart(theSession->Parts()->Work());
    NXOpen::Part* displayPart(theSession->Parts()->Display());
    try
    {
        //double fdirection[3], plane_normal[3], origin_point[3];

//        double faceLength, faceWidth, particleSize;
        int particleNumber;
        if(block == enumParticleShape)
        {
        //---------Enter your code here-----------
        }
        else if(block == expressionFaceLength)
        {
        //---------Enter your code here-----------
//            faceLength = expressionFaceLength->Value();
        }
        else if(block == expressionFaceWidth)
        {
        //---------Enter your code here-----------
//            faceWidth = expressionFaceWidth->Value();
        }
        else if(block == expressionParticleSize)
        {
        //---------Enter your code here-----------
//            particleSize = expressionParticleSize->Value();
        }
        else if(block == integerParticleNumber)
        {
            particleNumber = integerParticleNumber->Value();
        }
        else if(block == doublePorousRatio)
        {
        //---------Enter your code here-----------
            //创建固定的基准平面
            NXOpen::FourPointSurfaceBuilder* fourPointSurfaceBuilder1;
            fourPointSurfaceBuilder1 = workPart->Bodies()->CreateFourPointSurfaceBuilder();

            NXOpen::Scalar* scalar11;
            scalar11 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar12;
            scalar12 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar13;
            scalar13 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Point* setPoint1 = workPart->Points()->CreatePoint(scalar11, scalar12, scalar13, NXOpen::SmartObject::UpdateOptionWithinModeling);
            fourPointSurfaceBuilder1->SetPoint1(setPoint1);

            NXOpen::Scalar* scalar21;
            scalar21 = workPart->Scalars()->CreateScalar(20.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar22;
            scalar22 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar23;
            scalar23 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Point* setPoint2 = workPart->Points()->CreatePoint(scalar21, scalar22, scalar23, NXOpen::SmartObject::UpdateOptionWithinModeling);
            fourPointSurfaceBuilder1->SetPoint2(setPoint2);

            NXOpen::Scalar* scalar31;
            scalar31 = workPart->Scalars()->CreateScalar(20.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar32;
            scalar32 = workPart->Scalars()->CreateScalar(10.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar33;
            scalar33 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Point* setPoint3 = workPart->Points()->CreatePoint(scalar31, scalar32, scalar33, NXOpen::SmartObject::UpdateOptionWithinModeling);
            fourPointSurfaceBuilder1->SetPoint3(setPoint3);

            NXOpen::Scalar* scalar41;
            scalar41 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar42;
            scalar42 = workPart->Scalars()->CreateScalar(10.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar43;
            scalar43 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Point* setPoint4 = workPart->Points()->CreatePoint(scalar41, scalar42, scalar43, NXOpen::SmartObject::UpdateOptionWithinModeling);
            fourPointSurfaceBuilder1->SetPoint4(setPoint4);

            NXOpen::NXObject* nXObject1;
            nXObject1 = fourPointSurfaceBuilder1->Commit();


            NXOpen::DisplayModification* displayModification1;
            displayModification1 = theSession->DisplayManager()->NewDisplayModification();
            displayModification1->SetApplyToAllFaces(false);
            displayModification1->SetNewGrid(0, 0);
            displayModification1->SetPoleDisplayState(false);
            displayModification1->SetKnotDisplayState(false);
            std::vector<NXOpen::DisplayableObject*> objects1(1);
            NXOpen::Features::Brep* brep1(dynamic_cast<NXOpen::Features::Brep*>(workPart->Features()->FindObject("UNPARAMETERIZED_FEATURE(9)")));
            NXOpen::Face* face1(dynamic_cast<NXOpen::Face*>(brep1->FindObject("FACE 1 {(10,5,0) UNPARAMETERIZED_FEATURE(9)}")));
            objects1[0] = face1;
            displayModification1->Apply(objects1);
            face1->SetColor(186);
            //face1->SetColor(32767);

            fourPointSurfaceBuilder1->Destroy();

        }
        // Create border lines
//        UF_CURVE_line_t LineCoods1;
////        LineCoods1.start_point[3] = {0.0,0.0,0.0};
//        LineCoods1.start_point[0] = 0.0;
//        LineCoods1.start_point[1] = 0.0;
//        LineCoods1.start_point[2] = 0.0;
////        LineCoods1.end_point[3] = {faceLength,0.0,0.0};
//        LineCoods1.end_point[0] = expressionFaceLength->Value();
//        LineCoods1.end_point[1] = 0.0;
//        LineCoods1.end_point[2] = 0.0;
//        tag_t Line1Tag = NULL_TAG;
//        UF_CURVE_create_line(&LineCoods1, &Line1Tag);
//        UF_CURVE_line_t LineCoods2;
////        LineCoods2.start_point[3] = {faceLength, 0.0, 0.0};
//        LineCoods2.start_point[0] = expressionFaceLength->Value();
//        LineCoods2.start_point[1] = 0.0;
//        LineCoods2.start_point[2] = 0.0;
////        LineCoods2.end_point[3] = {faceLength,faceWidth,0.0};
//        LineCoods2.end_point[0] = expressionFaceLength->Value();
//        LineCoods2.end_point[1] = expressionFaceWidth->Value();
//        LineCoods2.end_point[2] = 0.0;
//        tag_t Line2Tag = NULL_TAG;
//        UF_CURVE_create_line(&LineCoods2, &Line2Tag);
//        UF_CURVE_line_t LineCoods3;
////        LineCoods3.start_point[3] = {faceLength,faceWidth,0.0};
//        LineCoods3.start_point[0] = expressionFaceLength->Value();
//        LineCoods3.start_point[1] = expressionFaceWidth->Value();
//        LineCoods3.start_point[2] = 0.0;
////        LineCoods3.end_point[3] = {0.0,faceWidth,0.0};
//        LineCoods3.end_point[0] = 0.0;
//        LineCoods3.end_point[1] = expressionFaceWidth->Value();
//        LineCoods3.end_point[2] = 0.0;
//        tag_t Line3Tag = NULL_TAG;
//        UF_CURVE_create_line(&LineCoods3, &Line3Tag);
//        UF_CURVE_line_t LineCoods4;
////        LineCoods4.start_point[3] = {faceLength,faceWidth,0.0};
//        LineCoods4.start_point[0] = 0.0;
//        LineCoods4.start_point[1] = expressionFaceWidth->Value();
//        LineCoods4.start_point[2] = 0.0;
////        LineCoods4.end_point[3] = {0.0,faceWidth,0.0};
//        LineCoods4.end_point[0] = 0.0;
//        LineCoods4.end_point[1] = 0.0;
//        LineCoods4.end_point[2] = 0.0;
//        tag_t Line4Tag = NULL_TAG;
//        UF_CURVE_create_line(&LineCoods4, &Line4Tag);
//        // Create bounded plane
//        UF_STRING_t sSection;
//        UF_MODL_init_string_list(&sSection);
//        UF_MODL_create_string_list(1, 4, &sSection);
////        sSection.num = ;
////        sSection.string[3] = ;
////        sSection.dir[] = UF_MODL_CURVE_START_FROM_BEGIN;
////        sSection.id[0] = {Line1Tag, Line2Tag, Line3Tag, Line4Tag};
//        sSection.id[0] = Line1Tag;
//        sSection.id[1] = Line2Tag;
//        sSection.id[2] = Line3Tag;
//        sSection.id[3] = Line4Tag;
////
//        double DistanceTol;
//        double AngleTol;
//        UF_MODL_ask_distance_tolerance(&DistanceTol);
//        UF_MODL_ask_angle_tolerance(&AngleTol);
//        double Tol[3] = {DistanceTol, AngleTol * DEGRA, 0.02};
//        tag_t BpBodyTag = NULL_TAG;
//        UF_MODL_create_bplane(&sSection, Tol, &BpBodyTag);
//        UF_MODL_free_string_list(&sSection);


        /*double Origin_Point[] = { 500.0, 500.0, 500.0 };
        double Plane_Normal[] = { 0.0, 0.0, 1.0 };
        tag_t Plane_Tag = NULL_TAG;
        UF_MODL_create_fixed_dplane(Origin_Point, Plane_Normal, &Plane_Tag);*/

//        double fdirection[3] = {0, 0, 0};
//        double plane_normal[3] = {0, 0, 1};
//        double origin_point[3] = {0, 0, 0};
//        tag_t plane_tag;
//        UF_MODL_create_plane(origin_point, plane_normal, &plane_tag);
//        char msg[256];
//        sprintf(msg,"value:%f", faceWidth + expressionFaceLength->Value());
//        uc1601(msg, 1);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int Porous2D::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* Porous2D::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
