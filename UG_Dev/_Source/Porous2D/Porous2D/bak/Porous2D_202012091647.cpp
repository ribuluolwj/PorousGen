//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  G:\RPWorkspace\PorousGen\UG_Dev\Application\Porous2D.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: RenPeng
//              Version: NX 1919
//              Date: 12-08-2020  (Format: mm-dd-yyyy)
//              Time: 16:22 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "Porous2D.hpp"
#include "PorousLib.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(Porous2D::theSession) = NULL;
UI *(Porous2D::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
Porous2D::Porous2D()
{
    try
    {
        // Initialize the NX Open C++ API environment
        Porous2D::theSession = NXOpen::Session::GetSession();
        Porous2D::theUI = UI::GetUI();
        theDlxFileName = "Porous2D.dlx";
        theDialog = Porous2D::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &Porous2D::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &Porous2D::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &Porous2D::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &Porous2D::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &Porous2D::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
Porous2D::~Porous2D()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    Porous2D *thePorous2D = NULL;
    try
    {
        thePorous2D = new Porous2D();
        // The following method shows the dialog immediately
        thePorous2D->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(thePorous2D != NULL)
    {
        delete thePorous2D;
        thePorous2D = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int Porous2D::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void Porous2D::initialize_cb()
{
    try
    {
        groupShape = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("groupShape"));
        enumParticleShape = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enumParticleShape"));
        groupSize = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("groupSize"));
        expressionFaceLength = dynamic_cast<NXOpen::BlockStyler::ExpressionBlock*>(theDialog->TopBlock()->FindBlock("expressionFaceLength"));
        expressionFaceWidth = dynamic_cast<NXOpen::BlockStyler::ExpressionBlock*>(theDialog->TopBlock()->FindBlock("expressionFaceWidth"));
        expressionParticleSize = dynamic_cast<NXOpen::BlockStyler::ExpressionBlock*>(theDialog->TopBlock()->FindBlock("expressionParticleSize"));
        groupParticle = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("groupParticle"));
        integerParticleNumber = dynamic_cast<NXOpen::BlockStyler::IntegerBlock*>(theDialog->TopBlock()->FindBlock("integerParticleNumber"));
        doublePorousRatio = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("doublePorousRatio"));
        buttonGenarate = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("buttonGenarate"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set
//here will take precedence and dialog will be launched showing that value.
//------------------------------------------------------------------------------
void Porous2D::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int Porous2D::apply_cb()
{
    int errorCode = 0;
    try
    {







    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int Porous2D::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
//--Initialize environment
    NXOpen::Part* workPart = theSession->Parts()->Work();
    NXOpen::Part* displayPart = theSession->Parts()->Display();
    try
    {

        if(block == enumParticleShape)
        {
        //---------Enter your code here-----------
        }
        else if(block == expressionFaceLength)
        {
        //---------Enter your code here-----------
            this->faceLength = expressionFaceLength->Value();
        }
        else if(block == expressionFaceWidth)
        {
        //---------Enter your code here-----------
            this->faceWidth = expressionFaceWidth->Value();
        }
        else if(block == expressionParticleSize)
        {
        //---------Enter your code here-----------
            this->particleSize = expressionParticleSize->Value();
        }
        else if(block == integerParticleNumber)
        {
        //---------Enter your code here-----------
            this->porousParticleNumber = integerParticleNumber->Value();
        }
        else if(block == doublePorousRatio)
        {
        //---------Enter your code here-----------
            this->porousRatio = doublePorousRatio->Value();
        }
        else if(block == buttonGenarate)
        {
        //--4 points creat plane
            NXOpen::FourPointSurfaceBuilder* fourPointSurfaceBuilder1;
            fourPointSurfaceBuilder1 = workPart->Bodies()->CreateFourPointSurfaceBuilder();
            //Create set points of surface
            //----Set setpoint1
            NXOpen::Scalar* scalar11;
            scalar11 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar12;
            scalar12 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar13;
            scalar13 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Point* setPoint1 = workPart->Points()->CreatePoint(scalar11, scalar12, scalar13, NXOpen::SmartObject::UpdateOptionWithinModeling);
            fourPointSurfaceBuilder1->SetPoint1(setPoint1);
            //----Set setpoint2
            NXOpen::Scalar* scalar21;
            scalar21 = workPart->Scalars()->CreateScalar(expressionFaceLength->Value(), NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar22;
            scalar22 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar23;
            scalar23 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Point* setPoint2 = workPart->Points()->CreatePoint(scalar21, scalar22, scalar23, NXOpen::SmartObject::UpdateOptionWithinModeling);
            fourPointSurfaceBuilder1->SetPoint2(setPoint2);
            //----Set setpoint3
            NXOpen::Scalar* scalar31;
            scalar31 = workPart->Scalars()->CreateScalar(expressionFaceLength->Value(), NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar32;
            scalar32 = workPart->Scalars()->CreateScalar(expressionFaceWidth->Value(), NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar33;
            scalar33 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Point* setPoint3 = workPart->Points()->CreatePoint(scalar31, scalar32, scalar33, NXOpen::SmartObject::UpdateOptionWithinModeling);
            fourPointSurfaceBuilder1->SetPoint3(setPoint3);
            //----Set setpoint4
            NXOpen::Scalar* scalar41;
            scalar41 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar42;
            scalar42 = workPart->Scalars()->CreateScalar(expressionFaceWidth->Value(), NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Scalar* scalar43;
            scalar43 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
            NXOpen::Point* setPoint4 = workPart->Points()->CreatePoint(scalar41, scalar42, scalar43, NXOpen::SmartObject::UpdateOptionWithinModeling);
            fourPointSurfaceBuilder1->SetPoint4(setPoint4);
            //----Create surface object
            NXOpen::NXObject* nXObjectSheet;
            nXObjectSheet = fourPointSurfaceBuilder1->Commit();
            //----Free memory
            fourPointSurfaceBuilder1->Destroy();

        //--Create particle boundary curves
            unsigned int currentParticleNum = 0;
            //vector<Porous2D::CircleParticle> genParticles;
            //----Generate random seed
            


            //----Create circle center point
            NXOpen::Point3d origin1(0.0, 0.0, 0.0);
            NXOpen::Vector3d normal1(0.0, 0.0, 1.0);
            NXOpen::Plane* plane1;
            plane1 = workPart->Planes()->CreatePlane(origin1, normal1, NXOpen::SmartObject::UpdateOptionWithinModeling);
            
            std::srand((unsigned)std::time(0));
            while (currentParticleNum < integerParticleNumber->Value())
            {
                NXOpen::Features::AssociativeArc* nullNXOpen_Features_AssociativeArc(NULL);
                NXOpen::Features::AssociativeArcBuilder* associativeArcBuilder1;
                associativeArcBuilder1 = workPart->BaseFeatures()->CreateAssociativeArcBuilder(nullNXOpen_Features_AssociativeArc);

                NXOpen::Scalar* scalarX1(NULL);
                scalarX1 = workPart->Scalars()->CreateScalar(GetRandomFloatNumber(expressionFaceLength->Value()), NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
                NXOpen::Scalar* scalarY1(NULL);
                scalarY1 = workPart->Scalars()->CreateScalar(GetRandomFloatNumber(expressionFaceWidth->Value()), NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
                NXOpen::Scalar* scalarZ1(NULL);
                scalarZ1 = workPart->Scalars()->CreateScalar(0.0, NXOpen::Scalar::DimensionalityTypeNone, NXOpen::SmartObject::UpdateOptionWithinModeling);
                NXOpen::Point* circleCorePoint1;
                circleCorePoint1 = workPart->Points()->CreatePoint(scalarX1, scalarY1, scalarZ1, NXOpen::SmartObject::UpdateOptionWithinModeling);
            //----Set
                NXOpen::Vector3d Vector1;
                Vector1 = { 0.0, 0.0, 1.0 };
                //associativeArcBuilder1->SetCenterRadiusLockedPlaneDirection(Vector1);
                associativeArcBuilder1->SetStartPointOptions(NXOpen::Features::AssociativeArcBuilder::StartOption::StartOptionPoint);
                associativeArcBuilder1->SetEndPointOptions(NXOpen::Features::AssociativeArcBuilder::EndOption::EndOptionDiameter);
                associativeArcBuilder1->SetType(NXOpen::Features::AssociativeArcBuilder::TypesArcFromCenter);
                associativeArcBuilder1->CenterPoint()->SetValue(circleCorePoint1);
                associativeArcBuilder1->Diameter()->SetValue(expressionParticleSize->Value());
                associativeArcBuilder1->Limits()->SetFullCircle(true);
                //associativeArcBuilder1->SetAssociative(true);
                NXOpen::NXObject* nXObjectCircle;
                nXObjectCircle = associativeArcBuilder1->Commit();
                associativeArcBuilder1->Destroy();
                std::srand((unsigned)rand());
                currentParticleNum++;
            }
            
            plane1->DestroyPlane();

        //--Trim sheet body
            //NXOpen::Features::Feature* nullNXOpen_Features_TrimSheet(NULL);
            //NXOpen::Features::TrimSheetBuilder* trimSheetBuilder1;
            //trimSheetBuilder1 = workPart->Features()->CreateTrimsheetBuilder(nullNXOpen_Features_TrimSheet);

            //trimSheetBuilder1->SetTolerance(0.001);
            //trimSheetBuilder1->SetExtendBoundaryObject(true);

            //NXOpen::Features::BodyFeature* sheetBodys = dynamic_cast<NXOpen::Features::BodyFeature*>(nXObjectSheet);
            //NXOpen::Body* body1 = dynamic_cast<NXOpen::Body*>(sheetBodys);
            //trimSheetBuilder1->TargetBodies()->Add(body1);
            //

            //NXOpen::Section* section1;
            //section1 = workPart->Sections()->CreateSection(0.00095, 0.001, 0.050000000000000003);
            //section1->SetAllowedEntityTypes(NXOpen::Section::AllowTypesOnlyCurves);
            //section1->AllowSelfIntersection(true);

            //trimSheetBuilder1->BoundaryObjects()->Add(section1);
            //NXOpen::NXObject* nXObjectSheetTrim;
            //nXObjectSheetTrim = trimSheetBuilder1->Commit();

            //trimSheetBuilder1->Destroy();

        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int Porous2D::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        Porous2D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* Porous2D::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
